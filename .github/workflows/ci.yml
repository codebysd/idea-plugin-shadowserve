name: CI

on: [push]

jobs:
  build:
    # Docker image
    runs-on: ubuntu-latest

    # CI steps
    steps:
      # Checkout sources from Git
      - name: Checkout Source
        id: checkout
        uses: actions/checkout@v1

      # Setup JDK 11
      - name: Set up JDK 11
        id: jdk
        uses: actions/setup-java@v1
        with:
          java-version: 11

      # Use caching for gradle dependencies
      - name: Gradle Cache
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Run gradle build tasks
      #      - name: Build with Gradle
      #        id: build
      #        run: ./gradlew build
      #
      #      # Bundle artifacts into a release zip file
      #      - name: Zip Artifacts
      #        id: zip
      #        if: success()
      #        run: zip -rj ./build/release.zip ./build/distributions

      # Collect tag and release info if present
      - name: Parse Git Info
        id: info
        if: success()
        uses: actions/github-script@0.3.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            return (context.payload.ref.match(/^refs\/tags\/(release-([Vv][\d\.]+(-snapshot)?))$/i) || [])[2];

      # Create a release on github if release tag present
      - name: Create a Release
        id: release
        if: success() && steps.info.outputs.result != 'undefined'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.info.outputs.result }}
          release_name: ${{ steps.info.outputs.result }}

      # Upload release zip to the created release
      - name: Upload artifacts
        id: upload
        if: success() && steps.info.outputs.result != 'undefined'
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./build/release.zip
          asset_name: release.zip
          asset_content_type: application/zip

      # The end